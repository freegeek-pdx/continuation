#!/bin/sh

# TODO:
# 

# Changelog:
# version 0.01
# * initial version
# version 0.02
# * support timeouts
# * support setup commands
# * add a simple way to checkout the repository, set it up, and use
#   the continuation-config directory inside of it for conf
# * automatic forking into the background
# * CC the last committer
# version 0.03
# * use perl and YAML for the config file instead of a directory with
#   a bunch of files in it (backwards compatibility is kept)
# * automatically clean up old "building.." states in the log,
#   replacing them with "unknown" states
# * on triggered builds (well, most of them), don't CC the author

migrate(){
    if [ -d conf -a ! -f continuation.yaml ]; then
        if [ -f work/continuation.yaml ]; then
            ln -s work/continuation.yaml
        else
            DEST=$(pwd)
            cd conf
            for i in *; do
                if [ "$(cat $i | wc -l)" != "1" ]; then
                    echo "$i: "
                    cat $i | sed 's/^/ - /'
                else
                    echo "$i: $(cat $i)"
                fi
            done > $DEST/continuation.yaml
            cd ..
        fi
        mail -s "$(basename $(get_from_config repo .. | sed 's/\.git$//')) continuation config migrated" $(get_from_config mail) <<EOF
The configuration files for the $(basename $(get_from_config repo .. | sed 's/\.git$//')) project have been migrated to
the new format. If you are using the old format symlinked into your
git repository, then it will no longer be updated from the git
repository. It will continue working with your current configuration,
and you will be able to generate this file again.

Here is the new config file (put it in continuation.yaml):
$(cat continuation.yaml)
EOF
        echo "Migrated configuration to the new format (continuation.yaml) sucessfully, and emailed $(get_from_config mail)"
    fi
    if [ -d conf -a -f continuation.yaml ]; then
        rm -fr conf
    fi
    if [ ! -f continuation.yaml ]; then
        echo "ERROR: There is no continuation.yaml, and no (deprecated) conf directory to generate one from, exiting"
        exit 1
    fi
}

get_from_config(){
    migrate
    if [ -n "$2" ]; then
        DIR="$2/"
    else
        DIR="./"
    fi
    echo ${DIR}continuation.yaml | perl -Mstrict -MYAML -e 'my ($t, @d); push @d, $t while(defined ($t = <STDIN>)); $t = join("\n", @d); my ($hashref, undef, undef) = Load($t); print (ref(%{$hashref}->{$ARGV[0]}) eq "ARRAY" ? join("\n", @{%{$hashref}->{$ARGV[0]}}) : %{$hashref}->{$ARGV[0]}) . "\n";' "$1"
}

main() {
    if [ -z "$INTERNAL_CONTINUATION" ]; then
    if [ -f tmp/pid ]; then
        if kill -0 $(cat tmp/pid); then
            echo "Already running" >&2
            exit 1
        else
            rm tmp/pid
            echo "Removing stale PID file"
        fi
    fi
    if [ -f tmp/die ]; then
        rm tmp/die
    fi
    migrate
    for i in repo command timeout mail tail base wait; do
        if [ -z "$(get_from_config $i)" ]; then
            echo "ERROR: Required config file setting '$i' is missing."
            exit 1
        fi
    done
    env INTERNAL_CONTINUATION=YEP nohup $(readlink -f $0) start 2>/dev/null &
    while [ ! -f tmp/pid ]; do sleep 0.25; done
    rm nohup.out
    exit 0
    fi
    exec >>logs/mainlog 2>>logs/mainlog </dev/null
    echo $$ > tmp/pid
    ORIG_TRIGGER=0
    if [ ! -d work/.git ]; then
        rm -fr work
        git clone $(get_from_config repo) work
        if [ -n "$(get_from_config setup)" ]; then
            F=$(mktemp)
            get_from_config setup > $F
            cd work
            . $F
            rm $F
            cd ..
        fi
        ORIG_TRIGGER=1
    fi
    waiter=0
    if [ -f logs/results ]; then
        sed -i 's/building..$/unknown/' logs/results
    fi
    while :; do
        echo "Running loop"
        waiter=$(( $waiter + 1 ))
        if [ -e tmp/die -a "$ORIG_TRIGGER" != "1" ]; then
            echo "Bye"
            rm tmp/die
            break
        fi
        if [ "$(( $(get_from_config wait) / 5 ))" = "$waiter" ]; then
            waiter=0
            echo "Checking repository"
        else
            echo "meh, not time yet, going back to sleep"
        fi
        if [ "$waiter" = "0" ]; then
        TRIGGERED=0
        if [ "$ORIG_TRIGGERED" = "1" ]; then
            TRIGGERED=1
            ORIG_TRIGGERED=0
        fi
        if [ -f tmp/trigger ]; then
            TRIGGERED=1
            rm tmp/trigger
        fi
        if [ "$TRIGGERED" != "1" ]; then
            cd work
            ORIG=$(git show | head -1 | awk '{print $2}')
            git pull
            NEW=$(git show | head -1 | awk '{print $2}')
            if [ "$NEW" != "$ORIG" ]; then
                TRIGGERED=1
            fi
            cd ..
        fi
        if [ "$TRIGGERED" = "1" ]; then
            cd work
            REV=$(git show | head -1 | awk '{print $2}')
            NUM=1
            while [ -f ../logs/$REV-$NUM.log ]; do
                NUM=$(( $NUM + 1 ))
            done
            REV=$REV-$NUM
            echo "$(date) $REV building.." >> ../logs/results
            echo "Starting at $(date)" > ../logs/$REV.log
            RET=0
            { timeout $(get_from_config timeout ..) $(get_from_config command ..) 2>&1 || RET=$?; echo; echo "Exited with return status $RET"; } >> ../logs/$REV.log
            echo "Finished at $(date)" >> ../logs/$REV.log
            sed -i '$ d' ../logs/results
            RETVAL=$(tail -2 ../logs/$REV.log | head -1 | cut -d' ' -f 5)
            if [ "$RETVAL" = "0" ]; then
                echo "$(date) $REV suceeded" >> ../logs/results
            else
                echo "$(date) $REV failed" >> ../logs/results
                if [ "$NUM" = "1" ]; then
                    CC_OPTS="-c \"$(git show | awk '/^Author: /{sub("Author: ", "", $0); print;}' | tail -1)\""
                else
                    CC_OPTS=""
                fi
                { echo "From $(get_from_config base ..)/$REV.log :"; echo; tail -n $(get_from_config tail ..) ../logs/$REV.log; } | mail -s "$(basename $(get_from_config repo .. | sed 's/\.git$//')) failed build $(echo $REV | sed -r 's/^(......).*-(.+)/\1-\2/')" $CC_OPTS $(get_from_config mail ..)
            fi
            cd ..
        fi
        fi
        echo "Done, sleeping"
        sleep 5
    done
    rm tmp/pid
}

cd `dirname $(readlink -f $0)`
mkdir -p logs tmp work
case "$1" in
    start)
        main
        ;;
    stop)
        touch tmp/die
        ;;
    kill)
        kill $(cat tmp/pid)
        for i in `seq 5`; do
            kill -s 0 $(cat tmp/pid) || break
            sleep 1
        done
        kill -s 9 $(cat tmp/pid)
        rm -f tmp/die
        rm -f tmp/pid
        ;;
    restart)
        $0 stop
        for i in `seq 5`; do
            [ -f tmp/pid ] || break
            sleep 1
        done
        $0 kill
        $0 start
        ;;
    trigger)
        touch tmp/trigger
        ;;
    version)
        echo "Continuation version 0.02"
        echo "Copyright (c) 2009 Ryan Niebur <ryanryan52@gmail.com>"
        echo "Licensed under the Do What The Fuck You Want To Public License Version 2, see the output of '$(basename $0) license'"
        ;;
    checkout)
        REPO="$2"
        if [ -z "$REPO" ]; then
            echo "Usage: $(basename $0) checkout REPO"
            exit 1
        fi
        if ! rmdir work; then
            echo "work already exists.."
            exit 1
        fi
        git clone $REPO work
        touch tmp/trigger
        if [ -d work/continuation-config -a ! -f work/continuation.yaml ]; then
            if [ -f conf ]; then
                mv conf conf.internal.bak
            fi
            ln -s work/continuation-config conf
            migrate
            if [ -f conf.internal.bak ]; then
                mv conf.internal.bak conf
            fi
        elif [ -f work/continuation.yaml ]; then
            if [ -f continuation.yaml ]; then
                rm continuation.yaml
            fi
            ln -s work/continuation.yaml
            if [ -n "$(get_from_config setup)" ]; then
                F=$(mktemp)
                get_from_config setup > $F
                cd work
                . $F
                rm $F
                cd ..
            fi
            echo "Sucessful"
        else
            echo "that repository doesn't have a continuation.yaml file...please manually configure continuation"
            exit 1
        fi
        ;;
    license)
        cat <<EOF
           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
                   Version 2, December 2004

Copyright (C) 2004 Sam Hocevar
 14 rue de Plaisance, 75014 Paris, France
Everyone is permitted to copy and distribute verbatim or modified
copies of this license document, and changing it is allowed as long
as the name is changed.

           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

 0. You just DO WHAT THE FUCK YOU WANT TO.
EOF
        ;;
    help)
        echo "Valid commands: start, restart, stop, kill, trigger, version, license, help, checkout, migrate"
        ;;
    migrate)
        migrate
        ;;
    *)
        echo "Unknown command $1 ... try help" >/dev/stderr
        exit 1
        ;;
esac
